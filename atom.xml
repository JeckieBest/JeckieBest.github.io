<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeckie</title>
  
  <subtitle>Jeckieの博客</subtitle>
  <link href="http://blog.jeckie.top/atom.xml" rel="self"/>
  
  <link href="http://blog.jeckie.top/"/>
  <updated>2021-11-23T12:43:48.482Z</updated>
  <id>http://blog.jeckie.top/</id>
  
  <author>
    <name>Jeckie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>递归算法</title>
    <link href="http://blog.jeckie.top/posts/5f7017e8.html"/>
    <id>http://blog.jeckie.top/posts/5f7017e8.html</id>
    <published>2021-11-23T12:25:30.000Z</published>
    <updated>2021-11-23T12:43:48.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><h2 id="递归的基本概述："><a href="#递归的基本概述：" class="headerlink" title="递归的基本概述："></a>递归的基本概述：</h2><h3 id="递归的定义："><a href="#递归的定义：" class="headerlink" title="递归的定义："></a>递归的定义：</h3><p>递归算法<strong>通过重复将问题分解为同类的子问题</strong>而解决问题的方法，个人认为递归的基本思想就是<strong>自己调用自己</strong>。需要注意的是使用递归时<strong>必须要有一个结束条件</strong>，也就是递归出口。</p><h3 id="递归的优缺点："><a href="#递归的优缺点：" class="headerlink" title="递归的优缺点："></a>递归的优缺点：</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>递归算法会使代码很简洁。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>递归算法解题的<strong>运行效率较低</strong>。在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储。<strong>递归次数过多容易造成栈溢出</strong>。</p></li><li><p>递归<strong>运行效率较低</strong>。所以一般不提倡用递归算法设计程序。</p></li><li><p>递归算法的**时间复杂度是O(n^2)**，所以也是比较暴力破解算法。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">function <span class="token function">recursion</span><span class="token punctuation">(</span>大规模<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end_condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 明确的递归终止条件</span>        end<span class="token punctuation">;</span>   <span class="token comment">// 简单情景</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">// 在将问题转换为子问题的每一步，解决该步中剩余部分的问题</span>        solve<span class="token punctuation">;</span>                <span class="token comment">// 递去</span>        <span class="token function">recursion</span><span class="token punctuation">(</span>小规模<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 递到最深处后，不断地归来</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>斐波那契数列如下： 1,1,2,3,5,8,13,21,34,…</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">//用到函数，使用函数时注意的形参和实参的区别</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//确定前两个数，也是递归的出口</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用了递归，递归就是自己调用自己，是一种非常简便的写法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main(){    //斐波那契数列第一种解法，F(n)=F(n - 1)+F(n - 2)    int n;    cin&gt;&gt;n;//输入需要得到斐波那契数列的第几项    int a=1,b=1;,i=1;//a,b是数列的第一、二个值，i是用来判断第几项的数值    while(i&lt;n)//知道i大于n才结束循环，相当于求得第n项的值后结束    {        int c=a+b;//c指下一项        a=b;//令第i项的第二个元素作为第i+1项的第一个元素，即n-2项        b=c;//将目前第i项的值作为i+1项的第二个元素，即n-1项        i++;//将i的值加一，保证循环可以退出，并且求第i+1项的数值    }    cout&lt;&lt;a&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一种是递归方法，第二种是非递归方法。明显可以看出第一种比第二种代码更简洁，更精炼。然而效率却没有第二种高</strong></p><h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * Title: 杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。  * 它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。  *   * 例如，下面给出了杨辉三角形的前4行：   *    1   *   1 1  *  1 2 1  * 1 3 3 1  */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 递归终止条件</span>              <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>               <span class="token comment">// 递归调用，缩小问题的规模</span>              <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getValue</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>之后遇到递归类型的算法题目会更新，目前就讲解到这里。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法篇" scheme="http://blog.jeckie.top/categories/%E7%AE%97%E6%B3%95%E7%AF%87/"/>
    
    
    <category term="算法" scheme="http://blog.jeckie.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="http://blog.jeckie.top/posts/17fd92ae.html"/>
    <id>http://blog.jeckie.top/posts/17fd92ae.html</id>
    <published>2021-11-15T11:19:59.000Z</published>
    <updated>2021-11-23T12:59:03.909Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="预先配置"><a href="#预先配置" class="headerlink" title="预先配置"></a>预先配置</h2><p>这两个安装就不进行操作了，发两个试过水的安装教程。（本来想自己出的，结果安装的时候忘记截屏了。。。）</p><p><strong>安装git:</strong>    <a href="https://blog.csdn.net/huangqqdy/article/details/83032408?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163670326116780264092782%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163670326116780264092782&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-83032408.pc_search_result_cache&amp;utm_term=git%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187">git安装配置</a></p><p><strong>安装Node.js：</strong> <a href="https://blog.csdn.net/zhangkaidsy/article/details/86645070?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163670294116780265496506%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163670294116780265496506&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-86645070.pc_search_result_cache&amp;utm_term=nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187">Node.js安装配置</a>   </p><p>注意：</p><ul><li>git安装时公钥配置可选。</li><li>node最后检测时一定要以管理员身份运行，否则权限不够，不能下载。</li></ul><p>附上最新版下载地址：</p><ul><li><a href="https://git-scm.com/downloads">git最新版下载地址</a></li><li><a href="https://nodejs.org/zh-cn/">node最新版下载地址</a></li></ul><h2 id="安装Hexo并初步建立blog"><a href="#安装Hexo并初步建立blog" class="headerlink" title="安装Hexo并初步建立blog"></a>安装Hexo并初步建立blog</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>打开cmd窗口，输入下方命令，下载Hexo（注意：一定要以管理员身份运行，之后所有操作，只要和下载相关都必须有管理员权限）</p><p><code>npm install -g hexo-cli</code></p><h3 id="建立博客"><a href="#建立博客" class="headerlink" title="建立博客"></a>建立博客</h3><p>进入放置博客的路径（用<strong>cd</strong>进入，<strong>d:**换盘），</strong>进入的路径就是你下载blog后的存放路径**</p><p>进入想要的路径后输入以下代码：<code>hexo init blog</code>创建blog，（blog是最后下载后的文件夹名，可以更改）</p><p>下载好后进入blog（文件夹路径）输入<code>hexo s</code>(博客会被启动，最后显示一个本地网址表示成功启动(<a href="http://localhost:4000/">http://localhost:4000</a>))</p><p>在cmd窗口摁CTRL+C可关闭博客。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/84e7c09ee0395f0faac60fdc381cd526.png" alt="img"></p><p>现在只是一个框架有了，之后下载主题，并进行美化</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>我使用的是hexo-matery主题，不喜欢的小伙伴可以自己去GitHub上查询主题。</p><p>将主题下载到blog文件夹下的themes下</p><p>在cmd中使用<code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></p><p>下载完成后，在根目录的__config.yml文件中找到themes将其切换成hexo-theme-matery</p><p><img src="https://i.loli.net/2020/05/04/YKwFax1NrtVL6Zo.jpg" alt="hexo-theme-1.jpg"></p><p>这样更换成功！！！</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><p>新建文章 <code>hexo new &lt;title&gt;</code>。最后是文章标题，不需要加方括号</p><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token operator">:</span> typora<span class="token operator">-</span>vue<span class="token operator">-</span>theme主题介绍date<span class="token operator">:</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">00</span>author<span class="token operator">:</span> 赵奇img<span class="token operator">:</span> <span class="token operator">/</span>source<span class="token operator">/</span>images<span class="token operator">/</span>xxx<span class="token punctuation">.</span>jpgtop<span class="token operator">:</span> <span class="token boolean">true</span>hide<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">true</span>coverImg<span class="token operator">:</span> <span class="token operator">/</span>images<span class="token operator">/</span><span class="token number">1.</span>jpgpassword<span class="token operator">:</span> <span class="token number">8d</span><span class="token number">969</span>eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc<span class="token operator">:</span> <span class="token boolean">false</span>mathjax<span class="token operator">:</span> <span class="token boolean">false</span>summary<span class="token operator">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories<span class="token operator">:</span> <span class="token class-name">Markdown</span>tags<span class="token operator">:</span>  <span class="token operator">-</span> <span class="token class-name">Typora</span>  <span class="token operator">-</span> <span class="token class-name">Markdown</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="个人常用实例"><a href="#个人常用实例" class="headerlink" title="个人常用实例"></a>个人常用实例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">title<span class="token operator">:</span> 题目date<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">15</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">59</span>author<span class="token operator">:</span> 作者名称coverImg<span class="token operator">:</span> <span class="token operator">/</span>medias<span class="token operator">/</span>banner<span class="token operator">/</span><span class="token number">6.</span>jpgtop<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">true</span>toc<span class="token operator">:</span> <span class="token boolean">true</span>mathjax<span class="token operator">:</span> <span class="token boolean">false</span>summary<span class="token operator">:</span> 文章摘要tags<span class="token operator">:</span>  <span class="token operator">-</span> 标签categories<span class="token operator">:</span>  <span class="token operator">-</span> 分类abbrlink<span class="token operator">:</span> <span class="token number">17f</span>d92aereprintPolicy<span class="token operator">:</span> cc_byimg<span class="token operator">:</span> 图片路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hexo clean &amp;&amp; hexo g -d</code>更新操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客篇" scheme="http://blog.jeckie.top/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"/>
    
    
    <category term="Hexo" scheme="http://blog.jeckie.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
