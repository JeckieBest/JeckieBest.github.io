{"meta":{"title":"Jeckie","subtitle":"Jeckieの博客","description":"本科 | 物联网工程 | 后端 | 算法","author":"Jeckie","url":"http://blog.Jeckie.top","root":"/"},"pages":[{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/index.html","permalink":"http://blog.jeckie.top/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"","date":"2021-11-13T14:17:49.417Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"http://blog.jeckie.top/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"404.html","permalink":"http://blog.jeckie.top/404.html","excerpt":"","text":""},{"title":"","date":"2021-11-13T14:17:49.417Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"http://blog.jeckie.top/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"archives/index.html","permalink":"http://blog.jeckie.top/archives/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"census/index.html","permalink":"http://blog.jeckie.top/census/index.html","excerpt":"","text":""},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"about/index.html","permalink":"http://blog.jeckie.top/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"tags/index.html","permalink":"http://blog.jeckie.top/tags/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"resource/index.html","permalink":"http://blog.jeckie.top/resource/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"categories/index.html","permalink":"http://blog.jeckie.top/categories/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2021-11-13T14:17:49.417Z","comments":true,"path":"friends/index.html","permalink":"http://blog.jeckie.top/friends/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-10-24T16:00:00.000Z","updated":"2021-11-14T03:23:25.470Z","comments":true,"path":"contact/index.html","permalink":"http://blog.jeckie.top/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 Jeckieの友链信息 博客名称: Jeckieの博客 博客网址: 博客头像: https://img0.baidu.com/it/u=2919170279,884262835&amp;fm=26&amp;fmt=auto 博客介绍: 青春就是追逐自我，多数人青葱岁月，被优厚工作、稳定生活锁住。从没为自己活过的人，谈何青春？当你太顺从生活，它就会瞧不起你。青春不过是肆意张狂的那几年：宁有过错，不要错过。"},{"title":"相册","date":"2021-11-14T05:41:03.696Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"List/galleries/index.html","permalink":"http://blog.jeckie.top/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/tools/index.html","permalink":"http://blog.jeckie.top/List/tools/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/music/index.html","permalink":"http://blog.jeckie.top/List/music/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2021-11-13T14:17:49.292Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/movies/index.html","permalink":"http://blog.jeckie.top/List/movies/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2021-11-13T14:17:49.292Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2021-11-13T14:17:49.292Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2021-11-13T14:17:49.307Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2021-11-14T05:41:11.601Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2021-11-13T14:17:49.292Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2021-11-13T14:17:49.292Z","updated":"2021-11-13T14:17:49.292Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2021-11-13T14:17:49.307Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2021-11-13T14:17:49.307Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2021-11-13T14:17:49.307Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2021-11-13T14:17:49.307Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2021-11-13T14:17:49.307Z","updated":"2021-11-13T14:17:49.307Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"http://blog.jeckie.top/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""}],"posts":[{"title":"递归算法","slug":"递归算法","date":"2021-11-23T12:25:30.000Z","updated":"2021-11-23T13:16:30.364Z","comments":true,"path":"posts/5f7017e8.html","link":"","permalink":"http://blog.jeckie.top/posts/5f7017e8.html","excerpt":"","text":"递归算法递归的基本概述：递归的定义：递归算法通过重复将问题分解为同类的子问题而解决问题的方法，个人认为递归的基本思想就是自己调用自己。需要注意的是使用递归时必须要有一个结束条件，也就是递归出口。 递归的优缺点：优点递归算法会使代码很简洁。 缺点 递归算法解题的运行效率较低。在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储。递归次数过多容易造成栈溢出。 递归运行效率较低。所以一般不提倡用递归算法设计程序。 递归算法的**时间复杂度是O(n^2)**，所以也是比较暴力破解算法。 function recursion(大规模){ if (end_condition){ // 明确的递归终止条件 end; // 简单情景 }else{ // 在将问题转换为子问题的每一步，解决该步中剩余部分的问题 solve; // 递去 recursion(小规模); // 递到最深处后，不断地归来 } } 例题斐波那契数列斐波那契数列如下： 1,1,2,3,5,8,13,21,34,… int fib(int n)//用到函数，使用函数时注意的形参和实参的区别 { if(n==1 || n==2)//确定前两个数，也是递归的出口 return 1; else return Fib(n-1)+Fib(n-2);//使用了递归，递归就是自己调用自己，是一种非常简便的写法 } #include&lt;iostream&gt; using namespace std; int main() { //斐波那契数列第一种解法，F(n)=F(n - 1)+F(n - 2) int n; cin&gt;&gt;n;//输入需要得到斐波那契数列的第几项 int a=1,b=1;,i=1;//a,b是数列的第一、二个值，i是用来判断第几项的数值 while(i&lt;n)//知道i大于n才结束循环，相当于求得第n项的值后结束 { int c=a+b;//c指下一项 a=b;//令第i项的第二个元素作为第i+1项的第一个元素，即n-2项 b=c;//将目前第i项的值作为i+1项的第二个元素，即n-1项 i++;//将i的值加一，保证循环可以退出，并且求第i+1项的数值 } cout&lt;&lt;a&lt;&lt;endl; return 0; } 第一种是递归方法，第二种是非递归方法。明显可以看出第一种比第二种代码更简洁，更精炼。然而效率却没有第二种高 杨辉三角/** * Title: 杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。 * 它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。 * * 例如，下面给出了杨辉三角形的前4行： * 1 * 1 1 * 1 2 1 * 1 3 3 1 */ public static int getValue(int x, int y) { if(y &lt;= x &amp;&amp; y &gt;= 0){ if(y == 0 || x == y){ // 递归终止条件 return 1; }else{ // 递归调用，缩小问题的规模 return getValue(x-1, y-1) + getValue(x-1, y); } } return -1; } 之后遇到递归类型的算法题目会更新，目前就讲解到这里。","categories":[{"name":"算法篇","slug":"算法篇","permalink":"http://blog.jeckie.top/categories/%E7%AE%97%E6%B3%95%E7%AF%87/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://blog.jeckie.top/tags/%E7%AE%97%E6%B3%95/"}],"author":"Jeckie"},{"title":"hexo博客搭建","slug":"hexo博客搭建","date":"2021-11-15T11:19:59.000Z","updated":"2021-11-23T12:59:03.909Z","comments":true,"path":"posts/17fd92ae.html","link":"","permalink":"http://blog.jeckie.top/posts/17fd92ae.html","excerpt":"","text":"个人博客搭建预先配置这两个安装就不进行操作了，发两个试过水的安装教程。（本来想自己出的，结果安装的时候忘记截屏了。。。） 安装git: git安装配置 安装Node.js： Node.js安装配置 注意： git安装时公钥配置可选。 node最后检测时一定要以管理员身份运行，否则权限不够，不能下载。 附上最新版下载地址： git最新版下载地址 node最新版下载地址 安装Hexo并初步建立blog安装hexo打开cmd窗口，输入下方命令，下载Hexo（注意：一定要以管理员身份运行，之后所有操作，只要和下载相关都必须有管理员权限） npm install -g hexo-cli 建立博客进入放置博客的路径（用cd进入，d:**换盘），进入的路径就是你下载blog后的存放路径** 进入想要的路径后输入以下代码：hexo init blog创建blog，（blog是最后下载后的文件夹名，可以更改） 下载好后进入blog（文件夹路径）输入hexo s(博客会被启动，最后显示一个本地网址表示成功启动(http://localhost:4000)) 在cmd窗口摁CTRL+C可关闭博客。 现在只是一个框架有了，之后下载主题，并进行美化 更换主题我使用的是hexo-matery主题，不喜欢的小伙伴可以自己去GitHub上查询主题。 将主题下载到blog文件夹下的themes下 在cmd中使用git clone https://github.com/blinkfox/hexo-theme-matery.git 下载完成后，在根目录的__config.yml文件中找到themes将其切换成hexo-theme-matery 这样更换成功！！！ 文章 Front-matter 介绍新建文章 hexo new &lt;title&gt;。最后是文章标题，不需要加方括号 Front-matter 选项详解Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 hide false 隐藏文章，如果hide值为true，则文章不会在首页显示 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。 最简示例--- title: typora-vue-theme主题介绍 date: 2018-09-07 09:25:00 --- 最全示例--- title: typora-vue-theme主题介绍 date: 2018-09-07 09:25:00 author: 赵奇 img: /source/images/xxx.jpg top: true hide: false cover: true coverImg: /images/1.jpg password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 toc: false mathjax: false summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Markdown tags: - Typora - Markdown --- 个人常用实例title: 题目 date: 2021-11-15 19:19:59 author: 作者名称 coverImg: /medias/banner/6.jpg top: false cover: true toc: true mathjax: false summary: 文章摘要 tags: - 标签 categories: - 分类 abbrlink: 17fd92ae reprintPolicy: cc_by img: 图片路径 hexo clean &amp;&amp; hexo g -d更新操作","categories":[{"name":"博客篇","slug":"博客篇","permalink":"http://blog.jeckie.top/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.jeckie.top/tags/Hexo/"}],"author":"Jeckie"}],"categories":[{"name":"算法篇","slug":"算法篇","permalink":"http://blog.jeckie.top/categories/%E7%AE%97%E6%B3%95%E7%AF%87/"},{"name":"博客篇","slug":"博客篇","permalink":"http://blog.jeckie.top/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://blog.jeckie.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"Hexo","slug":"Hexo","permalink":"http://blog.jeckie.top/tags/Hexo/"}]}